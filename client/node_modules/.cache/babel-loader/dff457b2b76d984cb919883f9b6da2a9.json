{"ast":null,"code":"var _jsxFileName = \"/home/userr/Desktop/simple_react_dapp/client/src/App.jsx\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport \"./App.css\";\nimport SimpleToken from \"./contracts/SimpleToken.json\";\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.approve = () => {\n      this.setState({\n        loading: true\n      }); //透過合約裡的approve方法獲取轉帳的許可值\n\n      this.state.Contract.methods.approve(this.state.transAccount, this.state.amount + \"0\".repeat(this.state.decimals)).send({\n        from: this.state.defaultAccount\n      });\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.transfer = () => {\n      this.setState({\n        loading: true\n      }); //透過合約裡的transfer方法從發布者手中轉帳\n\n      this.state.Contract.methods.transfer(this.state.transAccount, this.state.amount + \"0\".repeat(this.state.decimals)).send({\n        from: this.state.defaultAccount\n      });\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.state = {\n      web3: false,\n      account: \"unknown\",\n      defaultAccount: \"0x9Ec4c413328380b225153b424Df8452782A64C6A\",\n      transAccount: \"\",\n      Contract: {},\n      contractAddress: \"\",\n      tokenName: \"\",\n      symbol: \"\",\n      decimals: 0,\n      userBalance: \"0\",\n      loading: false,\n      amount: \"\",\n      date: new Date(),\n      test: \"0\"\n    };\n    this.loadWeb3();\n    this.loadBlockchainData();\n  }\n\n  componentDidMount() {\n    // await this.loadWeb3();\n    this.loadBlockchainData();\n    this.timerID = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  async loadWeb3() {\n    //web3連線\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n      this.setState({\n        web3: true\n      });\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n      this.setState({\n        web3: true\n      });\n    } else {\n      window.alert(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const accounts = await web3.eth.getAccounts();\n    this.setState({\n      account: accounts[0]\n    });\n    const networkId = await web3.eth.net.getId(); //Load SimpleToken\n\n    const TokenData = await SimpleToken.networks[networkId];\n\n    if (TokenData) {\n      //實例化合約\n      const Contract = new web3.eth.Contract(SimpleToken.abi, TokenData.address);\n      this.setState({\n        Contract\n      }); //透過合約裡的balanceOf方法查詢餘額\n\n      let tokenBalance = await Contract.methods.balanceOf(this.state.account).call();\n      const balance = tokenBalance / 1000000000000000000;\n      const contractAddress = await TokenData.address;\n      const tokenName = await Contract.methods.name().call();\n      const symbol = await Contract.methods.symbol().call();\n      const decimals = await Contract.methods.decimals().call();\n      this.setState({\n        contractAddress: contractAddress.toString(),\n        tokenName: tokenName.toString(),\n        symbol: symbol.toString(),\n        userBalance: balance.toString(),\n        decimals: decimals\n      });\n    } else {\n      window.alert(\"Token contract not deployed to detected network.\");\n    }\n  }\n\n  //擷取輸入框裡的內容，再將內容傳進state，映射在輸入框裡的內容，\n  //此時框裡的內容並不是我們輸入的，而是從state裡提取出來的\n  handleInputAccount(e) {\n    this.setState({\n      transAccount: e.target.value\n    });\n  }\n\n  handleInputAmount(e) {\n    this.setState({\n      amount: e.target.value\n    });\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    } else if (this.state.loading) {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n\n    document.title = \"區塊鏈互動網頁\";\n    return React.createElement(\"div\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"NKUST GSLAB test\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"\\u9019\\u88E1\\u662F \", this.state.tokenName, \"!! \\u5340\\u584A\\u93C8\\u4E92\\u52D5\\u7DB2\\u9801\"), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"\\u8ACB\\u5148\\u505A\\u9A57\\u8B49 \\u518D\\u8F49\\u5E33\"), React.createElement(\"div\", {\n      className: \"infoBlock\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"\\u5408\\u7D04\\u4F4D\\u5740: \", this.state.contractAddress), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"\\u7528\\u6236\\u4F4D\\u5740: \", this.state.account), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"\\u7528\\u6236\\u9918\\u984D: \", this.state.userBalance, \" \", this.state.symbol), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"\\u6B32\\u8F49\\u5E33\\u4F4D\\u5740:\", React.createElement(\"input\", {\n      className: \"inputBox\",\n      type: \"text\",\n      value: this.state.transAccount,\n      onChange: e => this.handleInputAccount(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, this.state.test)), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"\\u6B32\\u8F49\\u5E33\\u91D1\\u984D:\", React.createElement(\"input\", {\n      className: \"inputBox\",\n      type: \"text\",\n      value: this.state.amount,\n      onChange: e => this.handleInputAmount(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"buttonVerify\",\n      onClick: () => this.approve(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"\\u9A57\\u8B49\"), React.createElement(\"button\", {\n      className: \"buttonTransfer\",\n      onClick: () => this.transfer(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"\\u8F49\\u5E33\")))));\n  }\n\n}","map":{"version":3,"sources":["/home/userr/Desktop/simple_react_dapp/client/src/App.jsx"],"names":["React","Component","Web3","SimpleToken","App","constructor","props","approve","setState","loading","state","Contract","methods","transAccount","amount","repeat","decimals","send","from","defaultAccount","transfer","web3","account","contractAddress","tokenName","symbol","userBalance","date","Date","test","loadWeb3","loadBlockchainData","componentDidMount","timerID","setInterval","tick","componentWillUnmount","clearInterval","window","ethereum","enable","currentProvider","alert","accounts","eth","getAccounts","networkId","net","getId","TokenData","networks","abi","address","tokenBalance","balanceOf","call","balance","name","toString","handleInputAccount","e","target","value","handleInputAmount","render","document","title"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport \"./App.css\";\nimport SimpleToken from \"./contracts/SimpleToken.json\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      web3: false,\n      account: \"unknown\",\n      defaultAccount: \"0x9Ec4c413328380b225153b424Df8452782A64C6A\",\n      transAccount: \"\",\n      Contract: {},\n      contractAddress: \"\",\n      tokenName: \"\",\n      symbol: \"\",\n      decimals: 0,\n      userBalance: \"0\",\n      loading: false,\n      amount: \"\",\n      date: new Date(),\n      test: \"0\",\n    };\n\n    this.loadWeb3();\n    this.loadBlockchainData();\n  }\n\n  componentDidMount() {\n    // await this.loadWeb3();\n    this.loadBlockchainData();\n\n    this.timerID = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n  tick() {\n    this.setState({\n      date: new Date(),\n    });\n  }\n  async loadWeb3() {\n    //web3連線\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n      this.setState({ web3: true });\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n      this.setState({ web3: true });\n    } else {\n      window.alert(\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n      );\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n\n    const networkId = await web3.eth.net.getId();\n\n    //Load SimpleToken\n    const TokenData = await SimpleToken.networks[networkId];\n\n    if (TokenData) {\n      //實例化合約\n      const Contract = new web3.eth.Contract(\n        SimpleToken.abi,\n        TokenData.address\n      );\n      this.setState({ Contract });\n\n      //透過合約裡的balanceOf方法查詢餘額\n      let tokenBalance = await Contract.methods\n        .balanceOf(this.state.account)\n        .call();\n      const balance = tokenBalance / 1000000000000000000;\n\n      const contractAddress = await TokenData.address;\n      const tokenName = await Contract.methods.name().call();\n      const symbol = await Contract.methods.symbol().call();\n      const decimals = await Contract.methods.decimals().call();\n\n      this.setState({\n        contractAddress: contractAddress.toString(),\n        tokenName: tokenName.toString(),\n        symbol: symbol.toString(),\n        userBalance: balance.toString(),\n        decimals: decimals,\n      });\n    } else {\n      window.alert(\"Token contract not deployed to detected network.\");\n    }\n  }\n\n  approve = () => {\n    this.setState({ loading: true });\n    //透過合約裡的approve方法獲取轉帳的許可值\n    this.state.Contract.methods\n      .approve(\n        this.state.transAccount,\n        this.state.amount + \"0\".repeat(this.state.decimals)\n      )\n      .send({ from: this.state.defaultAccount });\n    this.setState({ loading: false });\n  };\n\n  transfer = () => {\n    this.setState({ loading: true });\n    //透過合約裡的transfer方法從發布者手中轉帳\n    this.state.Contract.methods\n      .transfer(\n        this.state.transAccount,\n        this.state.amount + \"0\".repeat(this.state.decimals)\n      )\n      .send({ from: this.state.defaultAccount });\n    this.setState({ loading: false });\n  };\n\n  //擷取輸入框裡的內容，再將內容傳進state，映射在輸入框裡的內容，\n  //此時框裡的內容並不是我們輸入的，而是從state裡提取出來的\n  handleInputAccount(e) {\n    this.setState({ transAccount: e.target.value });\n  }\n\n  handleInputAmount(e) {\n    this.setState({ amount: e.target.value });\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    } else if (this.state.loading) {\n      return <p>Loading...</p>;\n    }\n    document.title = \"區塊鏈互動網頁\";\n    return (\n      <div className=\"App-header\">\n        <div>\n          <h1>NKUST GSLAB test</h1>\n          <h2>這裡是 {this.state.tokenName}!! 區塊鏈互動網頁</h2>\n          <h5>請先做驗證 再轉帳</h5>\n          <div className=\"infoBlock\">\n            <p>合約位址: {this.state.contractAddress}</p>\n            <p>用戶位址: {this.state.account}</p>\n            <p>\n              用戶餘額: {this.state.userBalance} {this.state.symbol}\n            </p>\n            <p>\n              欲轉帳位址:\n              <input\n                className=\"inputBox\"\n                type=\"text\"\n                value={this.state.transAccount}\n                onChange={(e) => this.handleInputAccount(e)}\n              />\n              <div>\n              {this.state.test}\n              </div>\n            </p>\n            <p>\n              欲轉帳金額:\n              <input\n                className=\"inputBox\"\n                type=\"text\"\n                value={this.state.amount}\n                onChange={(e) => this.handleInputAmount(e)}\n              />\n            </p>\n            <p>\n              <button className=\"buttonVerify\" onClick={() => this.approve()}>\n                驗證\n              </button>\n              <button\n                className=\"buttonTransfer\"\n                onClick={() => this.transfer()}\n              >\n                轉帳\n              </button>\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}